package ${apiServiceImplContext.pkg};

import ${entityContext.classImportPath};
import ${entityContext.classImportPath}Example;
import ${mapperContext.classImportPath};
import ${dtoContext.classImportPath};
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.unicorn.framework.core.exception.PendingException;
import org.springframework.beans.factory.annotation.Autowired;
import org.unicorn.framework.core.SysCode;
import lombok.extern.slf4j.Slf4j;
import java.util.List;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
/**
 * <p>
 * ${table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Service
public class ${apiServiceImplContext.name} {

    @Autowired
    private ${mapperContext.name} ${mapperContext.beanName};
    /**
     * 根据主键删除记录
     * @param id
     * @return
     * @throws PendingException
     */
    @Transactional(rollbackFor = {Exception.class})
    public void deleteByPrimaryKey(${table.primaryTableField.propertyType} id)throws PendingException{
        try {
            ${mapperContext.beanName}.deleteByPrimaryKey(id);
        } catch(Exception e){
            log.error("删除记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"删除记录失败",e);
        }
    }

    /**
     * 根据Example删除记录
     * @param ${entityContext.beanName}Example
     * @return
     * @throws PendingException
     */
    @Transactional(rollbackFor = {PendingException.class})
    public void deleteByExample(${entity}Example ${entityContext.beanName}Example)throws PendingException{
        try {
            ${mapperContext.beanName}.deleteByExample(${entityContext.beanName}Example);
        } catch(Exception e){
            log.error("根据Example删除记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"根据Example删除记录失败", e);
        }

    }
    /**
         * 根据ids删除记录
         * @param ids
         * @return
         * @throws PendingException
         */
    @Transactional(rollbackFor = {PendingException.class})
    public void deleteByIdList(List<Long> ids)throws PendingException{
        try {
            ${mapperContext.beanName}.deleteByIdList(ids);
        } catch(Exception e){
            log.error("根据ids删除记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"根据ids删除记录失败", e);
        }
    }

    /**
     * 保存记录
     * @param ${entityContext.beanName}
     * @return
     * @throws PendingException
     */
    @Transactional(rollbackFor = {Exception.class})
    public ${entity} insertSelective(${entity} ${entityContext.beanName})throws PendingException{
        try {
            ${mapperContext.beanName}.insertSelective(${entityContext.beanName});
            return ${entityContext.beanName};
        } catch(Exception e){
            log.error("新增记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"新增记录失败", e);
        }
    }

    /**
     * 批量保存记录
     * @param ${entityContext.beanName}List
     * @return
     * @throws PendingException
     */
    @Transactional(rollbackFor = {Exception.class})
    public void batchSave(List<${entity}> ${entityContext.beanName}List)throws PendingException{
        try {
            ${mapperContext.beanName}.insertList(${entityContext.beanName}List);
        } catch(Exception e){
            log.error("批量保存记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"批量保存记录失败", e);
        }
    }
    /**
    * 根据主键查询记录
    * @param id
    * @return
    * @throws PendingException
    */
    public ${entity} selectByPrimaryKey(${table.primaryTableField.propertyType} id)throws PendingException{
        try {
            return ${mapperContext.beanName}.selectByPrimaryKey(id);
        } catch(Exception e){
            log.error("查询记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"查询记录失败", e);
        }
    }

    /**
     * 根据条件查询记录列表
     * @param ${entityContext.beanName}
     * @return
     * @throws PendingException
     */
    public List<${entity}> selectList(${entity} ${entityContext.beanName})throws PendingException{
        try {
            return ${mapperContext.beanName}.select(${entityContext.beanName});
        } catch(Exception e){
            log.error("查询列表失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"查询列表失败", e);
        }
    }

    /**
     * 根据Example查询记录列表
     * @param ${entityContext.beanName}Example
     * @return
     * @throws PendingException
     */
    public List<${entity}> selectListByExample(${entity}Example ${entityContext.beanName}Example)throws PendingException{
        try {
            return ${mapperContext.beanName}.selectByExample(${entityContext.beanName}Example);
        } catch(Exception e){
            log.error("根据Example查询记录列表",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"根据Example查询记录列表", e);
        }
    }
    /**
     * 分页查询${table.comment}信息
     *
     * @param ${entityContext.beanName}PageRequestDto
     * @return
     * @throws PendingException
     */
    public PageInfo<${entity}> get${entity}ByPage(${dtoContext.name} ${dtoContext.beanName}) throws PendingException{
        try {
            ${entityContext.name}Example example = new ${entityContext.name}Example();
            example.createCriteriaAllOfBean(${dtoContext.beanName}.get${entityContext.name}());
            return PageHelper.startPage(${dtoContext.beanName}).doSelectPageInfo(() -> ${mapperContext.beanName}.selectByExample(example));
        } catch(Exception e){
            log.error("分页查询${table.comment}失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"分页查询${table.comment}失败",e);
        }
    }

    /**
     * 根据主键列表查询记录
     * @param ids
     * @return
     * @throws PendingException
     */
    public List<${entity}> selectListByIds(List<${table.primaryTableField.propertyType}> ids)throws PendingException{
        try {
            return orderDetailsMapper.selectByIdList(ids);
        } catch(Exception e){
            log.error("根据ID列表批量查询记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"根据ID列表批量查询记录失败",e);
        }
    }
    /**
     * 根据条件查询一条记录
     * @param ${entityContext.beanName}
     * @return
     * @throws PendingException
     */
    public ${entity} selectOne(${entity} ${entityContext.beanName})throws PendingException{
        try {
            return ${mapperContext.beanName}.selectOne(${entityContext.beanName});
        } catch(Exception e){
            log.error("查询单条记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"查询单条记录失败",e);
        }
    }

    /**
     * 根据条件查询一条记录 没有记录则抛异常
     * @param ${entityContext.beanName}
     * @return
     * @throws PendingException
     */
    public  ${entity} mustGet(${entity} ${entityContext.beanName})throws PendingException{
        try {
            ${entity} query${entity} = ${mapperContext.beanName}.selectOne(${entityContext.beanName});
            if(query${entity}==null){
                throw new PendingException(SysCode.DB_ERROR.getCode(),"没有查询到相关记录");
            }
            return query${entity};
        } catch(Exception e){
            log.error("查询单条记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"查询单条记录失败",e);
        }
    }

    /**
     * 根据Example查询记录总数
     * @param ${entityContext.beanName}Example
     * @return
     * @throws PendingException
     */
    public  Integer countByExample(${entity}Example ${entityContext.beanName}Example)throws PendingException{
        try {
            return ${mapperContext.beanName}.selectCountByExample(${entityContext.beanName}Example);
        } catch(Exception e){
            log.error("根据Example查询记录总数失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"根据Example查询记录总数失败",e);
        }
    }

    /**
     * 根据主键修改记录
     * @param ${entityContext.beanName}
     * @return
     * @throws PendingException
     */
    public ${entity} updateByPrimaryKey(${entity} ${entityContext.beanName})throws PendingException{
        try {
            ${mapperContext.beanName}.updateByPrimaryKeySelective(${entityContext.beanName});
            return ${entityContext.beanName};
        } catch(Exception e){
            log.error("根据主键更新单条记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"根据主键更新单条记录失败",e);
        }
    }

    /**
     * 根据Example修改记录
     * @param ${entityContext.beanName}
     * @return
     * @throws PendingException
     */
    public ${entity} updateByExample(${entity} ${entityContext.beanName},${entity}Example ${entityContext.beanName}Example)throws PendingException{
        try {
            ${mapperContext.beanName}.updateByExampleSelective(${entityContext.beanName},${entityContext.beanName}Example);
            return ${entityContext.beanName};
        } catch(Exception e){
            log.error("根据Example修改记录失败",e);
            throw new PendingException(SysCode.DB_ERROR.getCode(),"根据Example修改记录失败",e);
        }
    }
}
