<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<contextName>logback</contextName>
	<property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}-%msg%n"></property>
	<!--输出到控制台 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>
	</appender>
    <!-- 输出到文件 -->
	<appender name="file-info-log" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 Error 的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤 Error -->
			<level>INFO</level>
			<!--匹配到就允许-->
			<onMatch>ACCEPT</onMatch>
			<!--没有匹配到就禁止 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>../logs/info.log</File>
		<!-- 支持多JVM同时操作同一个日志文件 -->
		<!-- <Prudent>true</Prudent> -->
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>../logs/info.%d{yyyy-MM-dd}.log</FileNamePattern>
			<!--只保留最近30天的日志 -->
			<maxHistory>30</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>${log.pattern}</pattern>
		</encoder>
	</appender>
	
	
	<appender name="file-error-log" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 Error 的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤 Error -->
			<level>ERROR</level>
			<!--匹配到就禁止 -->
			<onMatch>ACCEPT</onMatch>
			<!--没有匹配到就允许 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>../logs/error.log</File>
		<!-- 支持多JVM同时操作同一个日志文件 -->
		<!-- <Prudent>true</Prudent> -->
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>../logs/error.%d{yyyy-MM-dd}.log</FileNamePattern>
			<!--只保留最近30天的日志 -->
			<maxHistory>30</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>${log.pattern}</pattern>
		</encoder>
	</appender>

	<root level="INFO">
		<appender-ref ref="console" />
		<appender-ref ref="file-info-log" />
	</root>
	
	<logger name="com.huanuo.internetofthings.dao" level="debug" additivity="false">
		<appender-ref ref="console" />
	</logger>
	
	<logger name="error" level="ERROR" additivity="false">
		<appender-ref ref="file-error-log" />
	</logger>

	<!-- <springProfile name="goyouxuan,test,testNew">
		<logger name="com.jiabiango" level="INFO" />
	</springProfile>
	<springProfile name="prod">
		<logger name="com.jiabiango" level="ERROR" />
	</springProfile>
 -->
</configuration>